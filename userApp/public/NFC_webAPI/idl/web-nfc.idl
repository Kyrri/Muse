
partial interface Navigator {
    readonly attribute NFC nfc;
};

interface NFC {
    Promise<NFCAdapter> requestAdapter();
};

interface NFCAdapter {
    Promise<void> pushMessage(NFCMessage message, optional NFCPushOptions options);
    void cancelPush();

    Promise<long> watch(NFCWatchOptions options, MessageCallback callback);
    Promise<void> unwatch(long id);
};

dictionary NFCPushOptions {
    NFCDeviceType target;
    long timeout;  // in ms, default (and max) is 10sec, UAs MAY shorten it
};

enum NFCPushTarget { "tag", "peer", "any" };

dictionary NFCWatchOptions {
    USVString url;  // domain/path or URL pattern
    USVString kind;
    USVString type;
    NFCWatchMode mode;
}

enum NFCWatchMode { "web-only", "all" };

callback MessageCallback = void (NFCMessage message, USVString url);

dictionary NFCRecord {
    NFCRecordType kind;  // based on TNF + JSON
    USVString type;  // IANA media type, with parameters
    any data;  // null, string (text, url), Object (json), ArrayBuffer
};

typedef sequence<NFCRecord> NFCMessage;

enum NFCRecordType { "empty", "text", "url", "json", "opaque" };
